// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  firstName        String
  lastName         String
  title            String?
  birth_date       DateTime
  img_url          String?
  email            String          @unique
  password         String
  credit           Float           @default(0.0)
  balance          Float           @default(0.0)
  type             UserType        @default(CLIENT)
  bio              String?
  role             UserRoleOptions @default(USER)
  expertise        String?
  photo            String?
  transactions     transaction[]
  refreshTokes     RefreshToken[]
  messageSent      message[]       @relation("senderUser")
  recieverSent     message[]       @relation("recieverrUser")
  roomsAsClient    Room[]          @relation("clientRooms")
  roomsAsConsultor Room[]          @relation("consultorRooms")
}

model message {
  id        String   @id @default(uuid())
  from      String
  to        String
  roomId    String? // Optional reference to the room
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  message   String
  sender    User     @relation("senderUser", fields: [from], references: [id], onDelete: Cascade)
  reciever  User     @relation("recieverrUser", fields: [to], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model transaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  value     Float
  createdAt DateTime @default(now())
}

model Room {
  id          String    @id @default(uuid())
  clientId    String
  consultorId String
  expiry      DateTime
  expiryMins  Int
  createdAt   DateTime  @default(now())
  client      User      @relation("clientRooms", fields: [clientId], references: [id], onDelete: Cascade)
  consultor   User      @relation("consultorRooms", fields: [consultorId], references: [id], onDelete: Cascade)
  messages    message[]

  @@unique([clientId, consultorId])
}

enum UserType {
  CONSULTOR
  CLIENT
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum UserRoleOptions {
  ADMIN
  USER
}
